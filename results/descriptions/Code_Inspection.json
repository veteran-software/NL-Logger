{
  "profile": "Default",
  "groups": [
    {
      "name": "EditorConfig",
      "inspections": [
        {
          "shortName": "EditorConfigCharClassRedundancy",
          "displayName": "Unnecessary character class",
          "enabled": false,
          "description": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`â†’`a`."
        },
        {
          "shortName": "EditorConfigDeprecatedDescriptor",
          "displayName": "Deprecated property",
          "enabled": false,
          "description": "Reports EditorConfig properties that are no longer supported."
        },
        {
          "shortName": "EditorConfigRootDeclarationUniqueness",
          "displayName": "Extra top-level declaration",
          "enabled": false,
          "description": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
        },
        {
          "shortName": "EditorConfigNumerousWildcards",
          "displayName": "Too many wildcards",
          "enabled": false,
          "description": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
        },
        {
          "shortName": "EditorConfigWildcardRedundancy",
          "displayName": "Redundant wildcard",
          "enabled": false,
          "description": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
        },
        {
          "shortName": "EditorConfigPartialOverride",
          "displayName": "Overlapping sections",
          "enabled": false,
          "description": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
        },
        {
          "shortName": "EditorConfigEmptySection",
          "displayName": "Empty section",
          "enabled": false,
          "description": "Reports sections that do not contain any EditorConfig properties."
        },
        {
          "shortName": "EditorConfigHeaderUniqueness",
          "displayName": "EditorConfig section is not unique",
          "enabled": false,
          "description": "Reports sections that define the same file pattern as other sections."
        },
        {
          "shortName": "EditorConfigShadowingOption",
          "displayName": "Overriding property",
          "enabled": false,
          "description": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
        },
        {
          "shortName": "EditorConfigListAcceptability",
          "displayName": "Unexpected value list",
          "enabled": false,
          "description": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
        },
        {
          "shortName": "EditorConfigShadowedOption",
          "displayName": "Overridden property",
          "enabled": false,
          "description": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
        },
        {
          "shortName": "EditorConfigEmptyHeader",
          "displayName": "Empty header",
          "enabled": false,
          "description": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
        },
        {
          "shortName": "EditorConfigValueCorrectness",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
        },
        {
          "shortName": "EditorConfigValueUniqueness",
          "displayName": "Non-unique list value",
          "enabled": false,
          "description": "Reports duplicates in lists of values."
        },
        {
          "shortName": "EditorConfigMissingRequiredDeclaration",
          "displayName": "Required declarations are missing",
          "enabled": false,
          "description": "Reports properties that miss the required declarations. Refer to the documentation for more information."
        },
        {
          "shortName": "EditorConfigCharClassLetterRedundancy",
          "displayName": "Duplicate character class letter",
          "enabled": false,
          "description": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
        },
        {
          "shortName": "EditorConfigKeyCorrectness",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
        },
        {
          "shortName": "EditorConfigPatternEnumerationRedundancy",
          "displayName": "Unnecessary braces",
          "enabled": false,
          "description": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}`. The braces are needed only if there are two and more, for example: `{foo,bar}`"
        },
        {
          "shortName": "EditorConfigEncoding",
          "displayName": "File encoding doesn't match EditorConfig charset",
          "enabled": false,
          "description": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
        },
        {
          "shortName": "EditorConfigSpaceInHeader",
          "displayName": "Space in file pattern",
          "enabled": false,
          "description": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
        },
        {
          "shortName": "EditorConfigOptionRedundancy",
          "displayName": "Redundant property",
          "enabled": false,
          "description": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
        },
        {
          "shortName": "EditorConfigRootDeclarationCorrectness",
          "displayName": "Unexpected top-level declaration",
          "enabled": false,
          "description": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
        },
        {
          "shortName": "EditorConfigReferenceCorrectness",
          "displayName": "Invalid reference",
          "enabled": false,
          "description": "Reports identifiers that are either unknown or have a wrong type."
        },
        {
          "shortName": "EditorConfigUnusedDeclaration",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "Reports unused declarations. Such declarations can be removed."
        },
        {
          "shortName": "EditorConfigPairAcceptability",
          "displayName": "Unexpected key-value pair",
          "enabled": false,
          "description": "Reports key-value pairs that are not allowed in the current context."
        },
        {
          "shortName": "EditorConfigPatternRedundancy",
          "displayName": "Duplicate or redundant pattern",
          "enabled": false,
          "description": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
        },
        {
          "shortName": "EditorConfigNoMatchingFiles",
          "displayName": "No matching files",
          "enabled": false,
          "description": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
        },
        {
          "shortName": "EditorConfigUnexpectedComma",
          "displayName": "Unexpected comma",
          "enabled": false,
          "description": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "GoUnnecessarilyExportedIdentifiers",
          "displayName": "Unnecessarily exported identifier",
          "enabled": false,
          "description": "Reports exported identifiers that are used only in the package where they are defined but are not used in other packages.\n\nMaking them exported is redundant and may clutter the API of the package."
        },
        {
          "shortName": "GoRedundantParens",
          "displayName": "Redundant parentheses",
          "enabled": true,
          "description": "Reports redundant parentheses in expressions and types.\n\nExample:\n\n    func _(x (int), y ((string))) {\n    }\n    func _() {\n     _ = (1 + 1)\n     _ = (((1 + 1)))\n     _ = (((1 + 1))) + (((2 + 2)))\n    }\n\nAfter the **Unwrap parentheses** quick-fix is applied:\n\n    func _(x int, y string) {\n    }\n    func _() {\n     _ = 1 + 1\n     _ = 1 + 1\n     _ = (1 + 1) + (2 + 2)\n    }\n"
        },
        {
          "shortName": "GoDisabledGopathIndexing",
          "displayName": "Disabled GOPATH indexing",
          "enabled": true,
          "description": "Reports disabled GOPATH indexing that might prevent proper resolution of code references.\n\nGOPATH stores your code base and all the files that are necessary for your development. Also, it includes packages that you download and\ninstall. If you disabled GOPATH indexing, only project and vendored packages are indexed. It might improve the overall performance but\nmakes it impossible to use packages from GOPATH."
        },
        {
          "shortName": "GoDeprecation",
          "displayName": "Deprecated element",
          "enabled": true,
          "description": "Reports usages of deprecated elements.\n\nExample:\n\n    // Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.\n    const (\n     SEEK_SET int = 0 // seek relative to the origin of the file\n     SEEK_CUR int = 1 // seek relative to the current offset\n     SEEK_END int = 2 // seek relative to the end\n    )\n\nAccording to [Constants at golang.org](https://golang.org/pkg/os/#pkg-constants), `SEEK_SET`, `SEEK_CUR`,\nand `SEEK_END` are deprecated."
        },
        {
          "shortName": "GoTestName",
          "displayName": "Malformed test function name",
          "enabled": true,
          "description": "Reports malformed names of tests, benchmarks, and examples.\n\nAccording to [Package testing at golang.org](https://golang.org/pkg/testing/), names must follow a special convention\nin order to make the go tool process them correctly.\n\nExample:\n\n    func Testfoo(*testing.T) {} // the 'go' tool will not run this test\n\nAfter the **Rename to** quick-fix is applied:\n\n    func TestFoo(*testing.T) {}\n"
        },
        {
          "shortName": "GoExportedFuncWithUnexportedType",
          "displayName": "Unexported return type of the exported function",
          "enabled": true,
          "description": "Reports exported functions with unexported return types.\n\nUnexported types can be difficult to use when viewing documentation under **go doc**.\n\nExample:\n\n    type hidden struct{}\n\n    func Exported() hidden { // Exported function with the `hidden` unexported return type\n     return hidden{}\n    }\n\nYou can apply **Export** quick-fix to export the type. After the quick-fix is applied,\ntype name will be capitalized:\n\n    type Hidden struct{}\n\n    func Exported() Hidden { // Fixed\n     return Hidden{}\n    }\n"
        },
        {
          "shortName": "GoMissingTrailingComma",
          "displayName": "Missing trailing comma before a newline in a composite literal",
          "enabled": false,
          "description": "Reports a missing trailing comma before a newline in composite literals, function call arguments, and function parameter lists.\n\nExample:\n\n    func f(f int) (\n     int,\n     bool   // missing a trailing comma\n    ){\n     println(1, 2  // missing a trailing comma\n     )\n    }\n"
        },
        {
          "shortName": "GoInterfaceToAny",
          "displayName": "Usage of 'interface{}' as a type",
          "enabled": true,
          "description": "Reports usages of the empty interface as a type or type constraint.\n\n\nThe empty interface denotes the set of all types.\nGo 1.18 introduced the more explicit alias `any` for `interface{}`,\nwhich is equivalent to `interface{}` in all ways.\n\nThe inspection is triggered for any usage of an empty interface as a type or type constraint.\nAliases of the empty interface and interfaces that exclusively embed other empty interfaces do not trigger the inspection.\n\nConsider using the more explicit alias `any` instead."
        },
        {
          "shortName": "GoContextTodo",
          "displayName": "Usage of context.TODO()",
          "enabled": false,
          "description": "Reports usages of `context.TODO()`.\n\nAccording to the [documentation at pkg.go.dev](https://pkg.go.dev/context#TODO),\nyou need to use `context.TODO` when it is unclear what\n`Context` to use, or `Context` is not yet available.\n`Context` might not be available because of the surrounding function that\nhas not yet been extended to accept the `Context` parameter.\n\nNote that it is a temporary placeholder, and you must change it in the future to a more meaningful\ncontext (for example, `context.Background()`)."
        },
        {
          "shortName": "GoFuzzingSupport",
          "displayName": "Fuzzing is supported starting with Go 1.18",
          "enabled": true,
          "description": "Reports presence of fuzz tests when Go SDK version is less than 1.18\n\nFuzz testing is a method of automated testing that involves a directed search for input data that may cause a program crash\nor expose invalid behavior. Go supports fuzz testing starting from Go 1.18.\n\nExample of a fuzz test:\n\n\n    func Div(a, b int) int {\n    \treturn a / b\n    }\n\n    func FuzzDiv(f *testing.F) {\n    \tf.Fuzz(func(t *testing.T, a, b int) {\n    \t\tDiv(a, b) // reports runtime error: integer divide by zero\n    \t})\n    }\n\n\nSee [Go Fuzzing](https://go.dev/doc/fuzz/) for more information."
        },
        {
          "shortName": "DuplicatedCode",
          "displayName": "Duplicated code fragment",
          "enabled": false,
          "description": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in [File \\| Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "enabled": false,
          "description": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
        },
        {
          "shortName": "ReassignedToPlainText",
          "displayName": "Reassigned to plain text",
          "enabled": false,
          "description": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "enabled": false,
          "description": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "enabled": false,
          "description": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "enabled": false,
          "description": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "enabled": false,
          "description": "Reports problems that are found by language annotators in the result of a batch code inspection run."
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "enabled": false,
          "description": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
        },
        {
          "shortName": "IncorrectFormatting",
          "displayName": "Incorrect formatting",
          "enabled": false,
          "description": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "enabled": false,
          "description": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
        },
        {
          "shortName": "SyntaxError",
          "displayName": "Syntax error",
          "enabled": false,
          "description": "Reports syntax errors that have been found in the result of a batch code inspection run."
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "enabled": false,
          "description": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
        },
        {
          "shortName": "QodanaServiceMessage",
          "displayName": "Qodana service message",
          "enabled": false,
          "description": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
        },
        {
          "shortName": "VgoMigrateFromReplacesToWorkspace",
          "displayName": "Migration to Go workspace is possible",
          "enabled": false,
          "description": "Generates 'go.work' files using 'replace' directives.\n\n\nGo workspaces is a feature introduced in Go 1.18 that allows working simultaneously on several modules.  \n\nWorkspaces are a modern alternative to 'replace' directives pointing to local directories.  \n\nAll modules in a workspace have the same set of dependencies, thus making the configuration simpler, more robust,\nand requiring fewer 'go list' calls to scan the project structure.  \n\nThe fix for this inspection generates a new 'go.work' file and does not change existing files.\n\n\nBy default, warning severity is used. If a generated workspace would include Go modules that were not replaced\nin the original 'go.mod', no warning is shown due to possible side effects caused by migration, but the fix still can be run manually.\n\n\nFor more information about workspaces, see [Go Modules Reference](https://go.dev/ref/mod#workspaces).  \n\nFor Go workspaces introduction, see [Tutorial: Getting started with multi-module\nworkspaces](https://go.dev/doc/tutorial/workspaces)."
        },
        {
          "shortName": "GoTemplateUnknownVariable",
          "displayName": "Unknown variable",
          "enabled": false,
          "description": "Reports usages of unknown variables in Go Templates.\n\nParsing of such templates will cause panic because variables must be declared before usage.\n\nExample:\n\n    {{$v}} is zero. {{/* bad, $v is unknown */}}\n    {{$v := 0}}{{$v}} is zero. {{/* good */}}\n"
        },
        {
          "shortName": "GoTemplateDuplicateVariable",
          "displayName": "Duplicate variable",
          "enabled": false,
          "description": "Reports duplicate Go Template variables that are declared in the same scope.\n\nDuplicating a variable reassigns the existing variable with the same name. This operation might lead to different\nunpredicatable issues.\n\nExample:\n\n    {{$v := 0}}{{$v := 1}}{{$v}} is 0. {{/* evaluates to '1 is 0' */}}\n    {{$v := 0}}{{$w := 1}}{{$v}} is 0. {{/* works as expected */}}\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "GoVetCopyLock",
          "displayName": "Locks mistakenly passed by value",
          "enabled": true,
          "description": "Reports locks that are mistakenly passed by values.\n\nAccidentally copying a value containing a lock may cause both copies to work incorrectly. Generally, such values should be\nreferred to through a pointer. A lock here means a type implementing `sync.Locker`, such as `sync.Mutex`\nor `sync.WaitGroup`.\n\nExample:\n\n    type SafeInt struct {\n      m sync.Mutex\n      i int\n    }\n\n    func (s SafeInt) Inc() { // mutex is copied\n      s.m.Lock()\n      s.i++\n      s.m.Unlock()\n    }\n\nAfter the **Add pointer** quick-fix is applied:\n\n    type SafeInt struct {\n      m sync.Mutex\n      i int\n    }\n\n    func (s *SafeInt) Inc() {\n      s.m.Lock()\n      s.i++\n      s.m.Unlock()\n    }\n"
        },
        {
          "shortName": "GoVetImpossibleInterfaceToInterfaceAssertion",
          "displayName": "Impossible interface type assertion",
          "enabled": true,
          "description": "Reports impossible interface-to-interface type assertions.\n\nChecks for type assertions `v.(T)` and corresponding type-switch cases\nin which the static type `V` of `v` is the interface that\ncannot possibly implement the target interface `T`. This occurs when\n`V` and `T` contain methods with the same name but\ndifferent signatures.\n\nExample:\n\n    var v interface {\n      Read()\n    }\n    _ = v.(io.Reader)\n\nThe `Read` method in `v` has a different signature than\nthe `Read` method in `io.Reader`, so this assertion\ncannot succeed.\n\nThis inspection only reports if the language version is 1.15 or higher."
        },
        {
          "shortName": "GoIrregularIota",
          "displayName": "Irregular usage of 'iota'",
          "enabled": true,
          "description": "Reports irregular usage of `iota` within a constant declaration.\n\nThe `iota` identifier is reset for every constant declaration and automatically incremented for every constant specification.\nWithin one constant specification, the identifier keeps its value. Explicitly referring to `iota` does not reset the counter.\n\nFor details, see [Iota](https://go.dev/ref/spec#Iota) in the Go specification.\n\nThis inspection is triggered if two constant specifications have a textually identical expression list containing at least one reference to `iota`\nand there are exclusively constant specifications without an expression list in between them.\n\nConsider omitting the redundant expression list or writing out the expression list every time.\n\nExample:\n\n    const (\n      a = iota  // 0\n      b         // 1\n      c = iota  // 2\n    )\n\nTriggers the inspection as the `iota` in the definition of `c` is redundant.\n\nExample:\n\n    const (\n      a, aa = iota, iota       // 0, 0\n      b, bb                    // 1, 1\n      c, cc = iota + 40, iota  // 42, 2\n    )\n\nDoes not trigger the inspection as none of the expression lists is redundant."
        },
        {
          "shortName": "GoVetStructTag",
          "displayName": "Malformed struct tag",
          "enabled": true,
          "description": "Reports struct tags that do not conform to [Go conventions for struct tags](https://golang.org/pkg/reflect/#StructTag).\n\nAccording to these conventions, tag strings are a concatenation of optionally space-separated `key:\"value\"` pairs. Each\nkey is a non-empty string consisting of non-control characters other than `space (U+0020 ' ')`, `quote (U+0022 '\"')`,\nand\n`colon (U+003A ':')`. Each value is quoted using `U+0022 '\"'` characters and Go string literal syntax.\n\nAlso, the inspection checks that fields with tags are exported.\n\nExample of a valid tag:\n\n    type Example struct {\n      Field int `json:\"field\" xml:\"demo\"`\n    }\n"
        },
        {
          "shortName": "GoShadowedVar",
          "displayName": "Shadowing variable",
          "enabled": true,
          "description": "Reports declarations of variables that overlap with the declarations in the outer scope.\n\nAs the meaning of the variable depends on the scope in that case, it may create confusion and lead to unintended consequences.\n\nExample:\n\n    for i := 0; i < len(nums); i++ {\n        for i := 0; i < len(nums); i++ {\n        }\n      }\n\nThe `i` variable in the embedded loop is shadowed. To get rid of shadowing, consider renaming the variable\nin the embedded loop.\n\n    for i := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums); j++ {\n        }\n      }\n"
        },
        {
          "shortName": "GoVetFailNowInNotTestGoroutine",
          "displayName": "'FailNow' in a non-test goroutine",
          "enabled": true,
          "description": "Reports calls to `testing.T.FailNow` and similar methods located in goroutines in test files.\n\nMethods like `FailNow` call `runtime.Goexit` and stop the calling goroutine, not the test.\nTherefore, they must only be called from the goroutine that runs the test or benchmark.\n\nFor more information about `FailNow`, see [func (\\*T) FailNow at\ngolang.org](https://golang.org/pkg/testing/#T.FailNow).\n\nExample:\n\n    func TestFoo(t *testing.T) {\n      go func() {\n        t.Fatal(\"oops\") //exits goroutine, not TestFoo\n      }()\n    }\n\nAfter the **Replace with 'Error' and 'return'** quick-fix is applied:\n\n    func TestFoo(t *testing.T) {\n      go func() {\n        t.Error(\"oops\")\n        return\n      }()\n    }\n"
        },
        {
          "shortName": "GoShift",
          "displayName": "Exceeded shift expression",
          "enabled": true,
          "description": "Reports shift expressions that equal or exceed the width of the integer.\n\nAll the bits of the left operand are shifted in such expression resulting in a constant value. The constant value\nindicates that either the shift offset is incorrect or the shift expression is redundant.\n\nExample:\n\n\n      func shift(i int8) {\n        fmt.Println(i << 8) // always prints 0\n      }\n"
        },
        {
          "shortName": "GoVetIntToStringConversion",
          "displayName": "Integer to string type conversion",
          "enabled": true,
          "description": "Reports conversions of `string(x)`-alike expressions where `x` is an integer but not byte or rune.\n\nSuch conversions are discouraged because they return the UTF-8 representation\nof the Unicode code point `x`, and not a decimal string representation\nof `x` as one might expect. Furthermore, if `x` denotes\nan invalid code point, the conversion cannot be statically rejected.\n\nFor conversions that intend on using the code point, consider replacing them\nwith `string(rune(x))`. Otherwise, `strconv.Itoa`\nand its equivalents return the string representation of the value in the desired\nbase.\n\nExample:\n\n    func main() {\n     a := 1\n     _ = string(a)\n    }\n\nAfter the **Convert integer to rune** quick-fix is applied:\n\n    func main() {\n     a := 1\n     _ = string(rune(a))\n    }\n"
        },
        {
          "shortName": "GoImportUsedAsName",
          "displayName": "Imported package name as a name identifier",
          "enabled": true,
          "description": "Reports declarations of variables, arguments or functions that overlap with the used import.\n\nWhile legal, such declarations will make using the package exported identifiers impossible after the declaration or create\nconfusion when reading the code.\n\nExample:\n\n    import \"fmt\"\n    import _ \"fmt\"\n    import iio \"io\"\n\n    func _() {\n     fmt.Println(\"demo\")\n     demo := true\n     _, _ = iio.EOF, demo\n    }\n\n    func demo() (int, int) {\n     return 1, 2\n    }\n\n    func _() {\n     _, _ = iio.EOF, demo\n     fmt := \"demo\"\n     iio := 1\n     _, _ = iio, fmt\n     a, _ := demo()\n     _ = a\n    }\n\nVariable names `fmt` and `iio` clash with names of import packages. Not to confuse them later in code, it is better\nto rename these variables."
        },
        {
          "shortName": "GoNilness",
          "displayName": "Nilness analyzer",
          "enabled": false,
          "description": "Reports problems caused by incorrect usage of the `nil` value.\n\nThe IDE analyses data flow to determine if variables could have `nil` or not `nil` values.\nBased on this, the IDE reports potential issues in code. Consider the following list of situations that might lead to unintended\nconsequences:\n\n* Method calls with the `nil` receiver might lead to 'nil pointer dereference'.\n* The `nil` slice indexing might cause panics.\n* Comparisons like `v == nil` might be meaningless if `v` is known to be always `nil` or not `nil`.\n* Variables with corresponding errors are not checked on not to be `nil`. An error corresponds to a variable when they are defined or assigned together in statements like `v, err := foo()`."
        },
        {
          "shortName": "GoPrintFunctions",
          "displayName": "Incorrect usage of 'fmt.Printf' and 'fmt.Println' functions",
          "enabled": true,
          "description": "Reports incorrect usages of `fmt.Printf`, `fmt.Println`, and similar formatting and printing functions.\n\nIn their format strings, formatting functions use formatting verbs, like `%s`, `%d`, `%v`, and others.\nIf formatting verbs are used incorrectly, the result of a formatting function will contain an error.\nFor more information about formatting verbs, see [Package fmt at golang.org](https://golang.org/pkg/fmt/).\n\nExample:\n\n    fmt.Printf(\"id: %s\", 42)\n\nThe output of this function is `id: %!s(int=42)`. It might be not what you really want.\nThe following function uses the `%d` formatting verb.\nThe output with the `%d` formatting verb will be `id: 42`.\n\n    fmt.Printf(\"id: %d\", 42)\n"
        },
        {
          "shortName": "GoDeferGo",
          "displayName": "Defer/go statement calls 'recover' or 'panic' directly",
          "enabled": true,
          "description": "Reports `defer` and `go` statements that call `panic()` or `recover()` directly.\n\nSuch statements are rarely useful and might indicate a misuse of the `panic()` and `recover()` mechanism.\nIn particular:\n\n* `go panic()`: a newly-started goroutine will panic immediately.\n* `defer panic()`: a function with this statement will always panic on exit.\n* `go recover()`: has no effect as newly-started goroutine cannot panic.\n* `defer recover()`: function with this statement will silently stop panicking. This could be a valid usage, but an idiomatic way is to inspect the value returned by `recover()`:\n\n      defer func() {\n        if r := recover(); r != nil {\n          fmt.Println(\"Recovered from: \", r)\n        }\n      }()\n\nFor more information about go statements and panics handling, see [Handling\npanics](https://golang.org/ref/spec#Handling_panics) and\n[Go statements](https://golang.org/ref/spec#Go_statements) in the Go Language Specification."
        },
        {
          "shortName": "GoErrorsAs",
          "displayName": "Incorrect usage of the 'errors.As' function",
          "enabled": true,
          "description": "Reports calls of the `errors.As` function when the second argument is not a pointer to an interface or to a type that implements an error.\n\nSuch calls panic at runtime.\n\nFor more information about the `As` function, see [func As at golang.org](https://golang.org/pkg/errors/#As).\n\nExample:\n\n    _, err := os.Open(\"non-existing\")\n    var pathError *fs.PathError\n    if errors.As(err, pathError) { // a pointer to *fs.PathError is required\n    }\n\nAfter the **Prepend '\\&'** quick-fix is applied:\n\n    _, err := os.Open(\"non-existing\")\n    var pathError *fs.PathError\n    if errors.As(err, &pathError) {\n    }\n\nThis inspection only reports if the language version is 1.13 or higher."
        },
        {
          "shortName": "GoVetUnsafePointer",
          "displayName": "Invalid conversions of 'uintptr' to 'unsafe.Pointer'",
          "enabled": true,
          "description": "Reports possibly incorrect conversions of `uintptr` to `unsafe.Pointer`.\n\nA conversion from\n`uintptr` to `unsafe.Pointer` is invalid if it implies that there is a `uintptr`-typed word\nin memory that holds a pointer value, because that word will be invisible to stack copying and to the garbage collector.\n\nExample of invalid usage:\n\n    nums := []int8{42, 24}\n    ptr := unsafe.Pointer(&nums[0])\n    addr := uintptr(ptr) // address is stored to a local variable\n    ptr = unsafe.Pointer(addr + uintptr(1))\n\nExample of valid usage:\n\n    nums := []int8{42, 24}\n    ptr := unsafe.Pointer(&nums[0])\n    ptr = unsafe.Pointer(uintptr(ptr) + uintptr(1))\n"
        },
        {
          "shortName": "GoUnhandledErrorResult",
          "displayName": "Unhandled error",
          "enabled": true,
          "description": "Reports calls to functions and methods that do not handle the call result of the `error` type.\n\nAn API of such functions imply that their execution might finish unsuccessfully and they would return an error.\nCalls that do not handle the error result could be an indication of the API misuse.\n\nExample:\n\n\n    os.Remove(\"non-existing\") // error is ignored\n\nAfter the **Handle error** quick-fix is applied:\n\n    err := os.Remove(\"non-existing\") // error is handled\n    if err != nil {\n      return err\n    }\n"
        },
        {
          "shortName": "GoReservedWordUsedAsName",
          "displayName": "Reserved word used as name",
          "enabled": true,
          "description": "Reports declarations of variables, arguments or functions that overlap with the built-in or reserved keyword.\n\nIf you receive this error then your code might not be as explicit as possible and might confuse other users.\n\nExample:\n\n    type byte struct{}\n    type string interface{}\n\nTypes `byte` and `string` collide with the built-in type aliases. Therefore, they will be highlighted.\nConsider renaming such declarations."
        },
        {
          "shortName": "GoVetLostCancel",
          "displayName": "'context.CancelFunc' is not called",
          "enabled": true,
          "description": "Reports execution paths that do not call the `cancel` function returned by `context.WithCancel` and similar functions.\n\nThe `WithCancel`, `WithDeadline`, and `WithTimeout` functions take a `Context` (the parent)\nand return a\nderived `Context` (the child) and a `CancelFunc`.\nCalling the `CancelFunc` cancels the child and its children, removes the parent's reference to the child, and stops any\nassociated timers.\nFailing to call the CancelFunc leaks the child and its children until the parent is canceled or the timer fires.\n\nFor more information about the `context` package, see [Package context at\ngolang.org](https://golang.org/pkg/context/).\n\nExample:\n\n    func _(ctx context.Context, cancel func()) {\n     var ctx2 context.Context\n     ctx2, cancel = context.WithCancel(ctx)\n     _ = ctx2\n    }\n"
        },
        {
          "shortName": "GoStandardMethods",
          "displayName": "Non-standard signature for well-known function names",
          "enabled": true,
          "description": "Reports methods with certain names in the following cases:\n\n* the method's name matches the name of several well-known interface methods from the standard library\n* the signature does not match the signature of the corresponding interface method\n\nSuch methods might indicate that the receiver type is intended to satisfy an interface from the standard library,\nbut fails to do so because of the mistake in the method's signature.\n\nExample:\n\n    type MyReader []byte\n\n    func (r MyReader) ReadByte(data []byte) (byte, error) {\n    }\n\nThe usage is suspicious because it looks like an attempt to implement `io.ByteReader` but the signature is wrong.\nMore correct version will be as follows:\n\n    type MyReader []byte\n\n    func (r MyReader) ReadByte() (byte, error) {\n    }\n"
        },
        {
          "shortName": "GoStringsReplaceCount",
          "displayName": "Incorrect 'strings.Replace' count argument",
          "enabled": true,
          "description": "Reports `strings.Replace` calls with the replace count `0` instead of `-1`.\n\nThe count argument for how many times a string should be replaced should not be `0`\nas it will not replace anything and make the function call redundant. Use `-1` instead.\n\nExample:\n\n    a := strings.Replace(\"SSS\", \"S\", \"H\", 0) // replaces nothing\n    b := strings.Replace(\"SSS\", \"S\", \"H\", -1) // replaces all S occurrences with H\n"
        },
        {
          "shortName": "GoUnusedCallResult",
          "displayName": "Unused function or method call result",
          "enabled": true,
          "description": "Reports calls to certain functions and methods that do not handle a call result.\n\nAn API of such functions imply that users\nshould call them mostly to get a return value and process it, not for side effects. Calls that do not handle the result\ncould be an indication of a misuse of the API.\n\nExample:\n\n    fmt.Errorf(\"error: %s\", reason) // constructed error is ignored\n\nAfter the **Introduce local variable** quick-fix is applied:\n\n    err := fmt.Errorf(\"error: %s\", reason)\n"
        },
        {
          "shortName": "GoDivisionByZero",
          "displayName": "Division by zero",
          "enabled": true,
          "description": "Reports division by zero.\n\nDivision by zero will lead to a runtime panic.\n\nExample:\n\n    s := 3 / 0\n"
        },
        {
          "shortName": "GoMixedReceiverTypes",
          "displayName": "Mixed value and pointer receivers",
          "enabled": true,
          "description": "Reports structures with methods that use a mixture of types: value and pointer receivers. Such usage is not recommended by the Go Documentation.\n\nFor details, see [Should I define methods on values or pointers?](https://go.dev/doc/faq#methods_on_values_or_pointers) in the Go FAQ.\n\nExample:\n\n    type S struct{\n    }\n\n    func (s *S) fun() {}\n    func (s S) fun2() {}\n"
        },
        {
          "shortName": "GoVetAtomic",
          "displayName": "Incorrect usage of the 'sync/atomic' package",
          "enabled": true,
          "description": "Reports assignment statements of the form `x = atomic.AddUint64(&x, 1)`.\n\nSuch operations are not atomic,\nand is a common misuse of the `sync/atomic` API. To make them atomic, one need to remove the assignment\nto use a direct call: `atomic.AddUint64(&x, 1)`. In that case, the value of `x` will be updated\natomically by address.\n\nExample:\n\n    import (\n     \"sync/atomic\"\n    )\n\n    type Counter uint64\n\n    func AtomicTests() {\n     x := uint64(1)\n     x = atomic.AddUint64(&x, 1)         // ERROR \"direct assignment to atomic value\"\n     _, x = 10, atomic.AddUint64(&x, 1)  // ERROR \"direct assignment to atomic value\"\n     x, _ = atomic.AddUint64(&x, 1), 10  // ERROR \"direct assignment to atomic value\"\n    }\n"
        },
        {
          "shortName": "GoLoopClosure",
          "displayName": "Loop variables captured by the func literal",
          "enabled": true,
          "description": "Reports references to loop variables from within `func` literals in `defer` and `go` statements. Such variables might have unexpected values because they are not copied to `func` literals, and the `func` literals in `defer` and `go` are not executed immediately.\n\nFor more information about closures and goroutines, see [What happens\nwith closures running as goroutines? at golang.org](https://golang.org/doc/go_faq.html#closures_and_goroutines).\n\nExample:\n\n    for _, v := range []string{\"a\", \"b\", \"c\"} {\n      go func() {\n        fmt.Println(v) // output will likely be `c c c`, not `a b c`\n      }()\n    }\n\nAfter the quick-fix is applied:\n\n    for _, v := range []string{\"a\", \"b\", \"c\"} {\n      v := v // `v` is copied now\n      go func() {\n        fmt.Println(v)\n      }()\n    }\n\nNote the analyzer only checks `defer` and `go` statements when they are the last statement in the loop body.\nOtherwise, the analysis might produce false detections."
        },
        {
          "shortName": "GoBuildTag",
          "displayName": "Malformed build tag",
          "enabled": true,
          "description": "Reports malformed build tags and build tags in the incorrect location. The `go` tool expects build tags to be located in particular places and follow a special syntax. If these requirements are not followed, build tags could either be ignored or the files could be incorrectly excluded from the build.\n\nSee [Build Constraints at golang.org](https://golang.org/pkg/go/build/#hdr-Build_Constraints).\n\nExample:\n\n    package main\n\n    // +build ignore\n\n    func main() {}\n\nThe `// +build ignore` part should be before the package declaration. To fix that, you can apply\nthe **Place build tag before package** quick-fix. After the quick-fix is applied:\n\n    // +build ignore\n\n    package main\n\n    import \"fmt\"\n"
        },
        {
          "shortName": "GoVetUnmarshal",
          "displayName": "'Unmarshal' is called with the incorrect argument",
          "enabled": true,
          "description": "Reports calls to `json.Unmarshal` and similar functions if the argument that is passed to store the result is not a pointer or an interface.\n\nThese calls will fail and return an error.\n\nFor more information about `Unmarshal`, see [func Unmarshal at\ngolang.org](https://golang.org/pkg/encoding/json/#Unmarshal).\n\nExample:\n\n    var animals []Animal\n    err := json.Unmarshal(jsonData, animals) // always returns an error\n\nAfter the **Prepend '\\&'** quick-fix is applied:\n\n    var animals []Animal\n    err := json.Unmarshal(jsonData, &animals)\n"
        },
        {
          "shortName": "CssNonIntegerLengthInPixels",
          "displayName": "Non-integer length in pixels",
          "enabled": false,
          "description": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font family name",
          "enabled": false,
          "description": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
        },
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma in selector list",
          "enabled": false,
          "description": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "GoUnusedTypeParameter",
          "displayName": "Unused type parameter",
          "enabled": true,
          "description": "Reports unused type parameters.\n\n    func main() {\n     printAll(\n      42,\n      \"bird\",\n     )\n    }\n\n    func printAll[I int, S string](\n     i I,\n     s string,\n    ) {\n     fmt.Println(i)\n     fmt.Println(s)\n    }\n\nThe **printAll** function has two type parameters `I` and `S` but uses only the first of them.\nTherefore, the `S string` is grayed out."
        },
        {
          "shortName": "GoRedundantTypeDeclInCompositeLit",
          "displayName": "Redundant types in composite literals",
          "enabled": true,
          "description": "Reports redundant type declarations in composite literals.\n\nExample:\n\n    nums := [][]int{[]int{1}, []int{2}}\n\nWe have a slice of slices of the `int` type. In this case, you can use a shorter definition. You can fix this code manually or\nuse the **Delete redundant type** quick-fix. After the quick-fix is applied, the code looks as follows:\n\n    nums := [][]int{{1},{2}}\n\nFor more information about composite literals, see [Go Language Specification:\nComposite Literals at golang.org](https://golang.org/ref/spec#Composite_literals)."
        },
        {
          "shortName": "GoRedundantImportAlias",
          "displayName": "Redundant import alias",
          "enabled": true,
          "description": "Reports aliases of imported packages that may be omitted.\n\nUsually, such aliases equal to the names of the imported packages,\nso aliases have no effect and one can use package names directly.\n\nExample:\n\n    import fmt \"fmt\"\n\nThe `fmt` alias duplicates the package name that is also named `\"fmt\"`. To delete the alias,\nuse the **Delete import alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    import \"fmt\"\n"
        },
        {
          "shortName": "GoUnusedParameter",
          "displayName": "Unused parameter",
          "enabled": true,
          "description": "Reports unused function parameters.\n\n    func main() {\n     printAll(\n      42,\n      \"bird\",\n     )\n    }\n\n    func printAll(\n     i int,\n     s string,\n    ) {\n     fmt.Println(i)\n    }\n\nWe call the **printAll** function passing `42` and `bird` as arguments. The **printAll** function accepts two\nparameters `int` and `string` but uses only the first of them. Therefore, the `s string` is grayed out."
        },
        {
          "shortName": "GoPreferNilSlice",
          "displayName": "Empty slice declared using a literal",
          "enabled": true,
          "description": "Reports slice declarations with empty literal initializers used instead of `nil`.\n\nAn empty slice can be represented by `nil` or an empty slice literal. They are functionally equivalent ---\ntheir `len` and `cap` are both zero --- but the nil slice is the preferred style.\nFor more information about empty slices, see\n[Declaring Empty Slices at golang.org](https://golang.org/wiki/CodeReviewComments#declaring-empty-slices).\n\nExample:\n\n    s := []string{}\n\nTo change the declaration, use the **Replace with nil slice declaration (changes semantics)** quick-fix.\nAfter the quick-fix is applied:\n\n    var s []string\n"
        },
        {
          "shortName": "GoSelfAssignment",
          "displayName": "Self assignment",
          "enabled": true,
          "description": "Reports expressions that are assigned to themselves.\n\nSuch assignments have no effect, removing them might improve code readability.\n\nExample:\n\n    func importedVarSelfAssignment() {\n     http.ErrNotSupported = http.ErrNotSupported\n    }\n"
        },
        {
          "shortName": "GoRedundantComma",
          "displayName": "Redundant comma",
          "enabled": true,
          "description": "Reports commas that may be omitted in the end of argument lists and composite literals.\n\nThe IDE suggests removing commas that are considered optional. Removing these commas might improve\ncode readability.\n\nExample:\n\n    s := []int{1, 2,} // the last comma may be omitted\n"
        },
        {
          "shortName": "GoRedundantSemicolon",
          "displayName": "Redundant semicolon",
          "enabled": true,
          "description": "Reports redundant semicolons. Idiomatic Go programs have semicolons only in places such as `for` loop clauses, to separate the initializer, condition, and continuation elements. They are also necessary to separate multiple statements on a line. In other cases, you can omit them.\n\nFor more information about semicolons in Go, see [Semicolons at golang.org](https://golang.org/doc/effective_go#semicolons).\n\nExample:\n\n    i := 1;\n"
        },
        {
          "shortName": "GoRedundantSecondIndexInSlices",
          "displayName": "Redundant second index in slices",
          "enabled": true,
          "description": "Reports a redundant second index (a high bound) in slice expressions.\n\nUsually, the second index is optional. If you remove it, you might improve code readability.\n\nExample:\n\n    var a []int\n    a = a[0:len(a)] // `a[0:len(a)]` is the same as `a[0:]`\n\nYou can apply the **Remove redundant index** quick-fix to such cases. After the quick-fix is applied, this\ncode looks as follows:\n\n    var a []int\n    a = a[0:]\n"
        },
        {
          "shortName": "GoUnusedExportedType",
          "displayName": "Unused exported type",
          "enabled": true,
          "description": "Reports unused exported types in the `main` package and in tests. For more information about exported identifiers, see [Exported identifiers at golang.org](https://golang.org/ref/spec#Exported_identifiers).\n\n    type User struct {}\n\n    func main() {}\n\nThe `User` struct type is declared but never used in the code. This type will be grayed out."
        },
        {
          "shortName": "GoVarAndConstTypeMayBeOmitted",
          "displayName": "Type can be omitted",
          "enabled": true,
          "description": "Reports types in variable and constant declarations that can be omitted since they can be inferred by the compiler. Such types are redundant, omitting them may improve readability of the code.\n\nExample:\n\n    var s string = fmt.Sprintln(\"hi\")\n\nThe `string` type in the variable declaration may be omitted. To remove the type, use the **Delete type** quick-fix.\nAfter the quick-fix is applied:\n\n    var s = fmt.Sprintln(\"hi\")\n"
        },
        {
          "shortName": "GoRedundantConversion",
          "displayName": "Redundant type conversion",
          "enabled": true,
          "description": "Reports type conversions that may be omitted.\n\nExample:\n\n    var s = string(\"hello\")\n\nThe `\"hello\"` value is the `string` type already, the additional conversion to `string` is redundant.\nTo remove the conversion, consider using the **Delete conversion** quick-fix.\n\nAfter the quick-fix is applied:\n\n    var s = \"hello\"\n\nSometimes conversion of a floating expression to a floating type can be intentional\n(see [this issue](https://github.com/mdempsky/unconvert/issues/40) as an example). In such cases, the IDE issues\na warning about a *possibly* redundant conversion."
        },
        {
          "shortName": "GoUnusedExportedFunction",
          "displayName": "Unused exported function",
          "enabled": true,
          "description": "Reports unused exported functions.\n\nIn Go, a function is exported if it begins with a capital letter. Names of exported functions that were defined but never used are\ngrayed out.\n\n    // Unused exported function\n    func ExportedUnusedFunc()  {\n\n    }\n\n    func main() {\n     fmt.Println(\"Hello\")\n    }\n"
        },
        {
          "shortName": "GoRedundantBlankArgInRange",
          "displayName": "Redundant blank argument in range",
          "enabled": true,
          "description": "Reports optional blank variables in range loops.\n\nWhen you use the `range` loop to iterate over a slice, two values are returned for each iteration. The first is the index\nnumber, and the second is a copy of the element at that index. If you do not need the second value, you can skip this element instead of\nusing a blank identifier.\n\nExample:\n\n    for a, _ = range v {} // `for a, _ =` is the same as `for a =`\n\nTo remove the blank identifier, you can use the **Delete blank argument** quick-fix. After the quick-fix is applied, the code will\nlook as follows:\n\n    for a = range v {}\n"
        },
        {
          "shortName": "GoUnusedFunction",
          "displayName": "Unused function",
          "enabled": true,
          "description": "Reports unused unexported functions.\n\nIn Go, a function is unexported if it begins with a small letter. Names of unexported functions that were defined but never used are\ngrayed out.\n\n    // Unused unexported function\n    func unExportedUnusedFunc()  {\n\n    }\n\n    func main() {\n     fmt.Println(\"Hello\")\n    }\n"
        },
        {
          "shortName": "GoUnusedConst",
          "displayName": "Unused constant",
          "enabled": true,
          "description": "Reports constants that are defined but are never used in code.\n\n    func main() {\n     const i = 100\n    }\n\nUnlike unused variables and imports, this code will compile. Unused constants might increase your code base and\nslow down program compilation. To delete the unused constant, consider using the **Delete constant** quick-fix."
        },
        {
          "shortName": "GoEmptyDeclaration",
          "displayName": "Empty declaration",
          "enabled": true,
          "description": "Reports empty declarations.\n\nEmpty declarations have no effect. If you remove them, you might improve code readability.\n\nExample:\n\n    func main() {\n     const () // empty declaration\n    }\n\nYou can apply the **Delete empty declaration** quick-fix to remove this declaration."
        },
        {
          "shortName": "GoUnusedType",
          "displayName": "Unused type",
          "enabled": true,
          "description": "Reports unused types.\n\n    type user struct {\n     FirstName string    `json:\"firstname\"`\n     LastName  string    `json:\"lastname\"`\n    }\n\n    func main() {\n     \n    }\n\nThe `user` type will be grayed out because it is not used anywhere in code."
        },
        {
          "shortName": "GoBoolExpressions",
          "displayName": "Bool condition",
          "enabled": true,
          "description": "Reports parts of boolean expressions that are either always `true`, always `false`, or redundant. Such boolean expressions can be simplified, which may improve a readability of the code. In some cases, this also indicates a presence of other issues.\n\nExample:\n\n    func isNonZero(x, y int) bool {\n      // the second comparison is either always true\n      // or not executed at all\n      return x > 0 && x > 0\n    }\n\nYou can apply the **Simplify expression** quick-fix for the `x > 0 && x > 0` part. After the quick-fix\nis applied, the expression looks as follows: `x > 0`."
        },
        {
          "shortName": "GoUnusedGlobalVariable",
          "displayName": "Unused global variable",
          "enabled": true,
          "description": "Reports global variables that are defined but are never used in code.\n\nIf you have unused variables, the code will not compile.\nFor more information about unused variables and imports, see [Unused imports and\nvariables at golang.org](https://golang.org/doc/effective_go#blank_unused).\n\n    func main() {\n     a := 422\n    }\n\nCode in the example will not compile. Therefore, it is highlighted as an error. You can apply two quick-fixes for such cases:\n**Delete variable** and **Rename _**. The first quick-fix deletes the variable, the second one will convert the variable to a blank\nidentifier.\n\nAfter the **Rename _** quick-fix is applied:\n\n    func main() {\n     _ := 422\n    }\n"
        },
        {
          "shortName": "VgoUnusedDependency",
          "displayName": "Unused dependency",
          "enabled": true,
          "description": "Reports unused dependencies.\n\nFor each dependency in the current *go.mod* file, this inspection searches for any import statement starting with the dependency\nname in\nall GO files.\nIf no such imports found then the dependency is considered unused.\nThis inspection is an equivalent of the [`go mod why` command](https://golang.org/ref/mod#go-mod-why).\n\nThe inspection processes `require` and `replace` directives.\nThe `require` directives with `// indirect` comments are also processed.\n\nThe inspection might not accurately determine that a replaced or indirectly-required dependency is unused in the following cases:\n\n* Vendoring mode is enabled\n* Some dependencies are not downloaded"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "enabled": false,
          "description": "Reports XML validation problems in the results of a batch code inspection."
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate 'id' attribute",
          "enabled": false,
          "description": "Reports a duplicate `id` attribute in XML."
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved 'id' reference",
          "enabled": false,
          "description": "Reports an unresolved `id` reference in XML."
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound namespace prefix",
          "enabled": false,
          "description": "Reports an unbound namespace prefix in XML."
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused schema declaration",
          "enabled": false,
          "description": "Reports an unused namespace declaration or location hint in XML."
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "enabled": false,
          "description": "Reports a root tag name different from the name specified in the `<doctype>` tag."
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference in XML."
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "Empty element content",
          "enabled": false,
          "description": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant attribute with default value",
          "enabled": false,
          "description": "Reports a redundant assignment of the default value to an XML attribute."
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "enabled": false,
          "description": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
        },
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "Failed external validation",
          "enabled": false,
          "description": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
        }
      ]
    },
    {
      "name": "YAML",
      "inspections": [
        {
          "shortName": "YAMLRecursiveAlias",
          "displayName": "Recursive alias",
          "enabled": false,
          "description": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
        },
        {
          "shortName": "YAMLSchemaValidation",
          "displayName": "Validation by JSON Schema",
          "enabled": false,
          "description": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
        },
        {
          "shortName": "YAMLDuplicatedKeys",
          "displayName": "Duplicated YAML keys",
          "enabled": false,
          "description": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
        },
        {
          "shortName": "YAMLUnusedAnchor",
          "displayName": "Unused anchor",
          "enabled": false,
          "description": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
        },
        {
          "shortName": "YAMLUnresolvedAlias",
          "displayName": "Unresolved alias",
          "enabled": false,
          "description": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
        },
        {
          "shortName": "YAMLSchemaDeprecation",
          "displayName": "Deprecated YAML key",
          "enabled": false,
          "description": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "enabled": false,
          "description": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "enabled": false,
          "description": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
        },
        {
          "shortName": "JsonPathEvaluateUnknownKey",
          "displayName": "Unknown property key used for JSONPath evaluate expression",
          "enabled": false,
          "description": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "enabled": false,
          "description": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "enabled": false,
          "description": "Reports a duplicate key in an object literal."
        },
        {
          "shortName": "JsonPathUnknownFunction",
          "displayName": "Unknown JSONPath function",
          "enabled": false,
          "description": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
        },
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "enabled": false,
          "description": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "enabled": false,
          "description": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
        },
        {
          "shortName": "JsonPathUnknownOperator",
          "displayName": "Unknown JSONPath operator",
          "enabled": false,
          "description": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "enabled": true,
          "description": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
        },
        {
          "shortName": "RegExpRedundantClassElement",
          "displayName": "Redundant '\\d', '[:digit:]', or '\\D' class elements",
          "enabled": false,
          "description": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
        },
        {
          "shortName": "RegExpSimplifiable",
          "displayName": "Regular expression can be simplified",
          "enabled": false,
          "description": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "enabled": true,
          "description": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpSuspiciousBackref",
          "displayName": "Suspicious back reference",
          "enabled": true,
          "description": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "enabled": true,
          "description": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpUnnecessaryNonCapturingGroup",
          "displayName": "Unnecessary non-capturing group",
          "enabled": true,
          "description": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "enabled": true,
          "description": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "enabled": true,
          "description": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "enabled": true,
          "description": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "enabled": true,
          "description": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "enabled": false,
          "description": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "enabled": true,
          "description": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "enabled": true,
          "description": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "enabled": true,
          "description": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused selector",
          "enabled": false,
          "description": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property",
          "enabled": false,
          "description": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Property is incompatible with selected browsers",
          "enabled": false,
          "description": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "Color could be replaced with #-hex",
          "enabled": false,
          "description": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
        },
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "Color could be replaced with rgb()",
          "enabled": false,
          "description": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Incorrect boolean attribute",
          "enabled": false,
          "description": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "enabled": false,
          "description": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "Unresolved file in a link",
          "enabled": false,
          "description": "Reports an unresolved file in a link."
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of 'script' tag",
          "enabled": false,
          "description": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown attribute",
          "enabled": false,
          "description": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "enabled": false,
          "description": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlWrongAttributeValue",
          "displayName": "Wrong attribute value",
          "enabled": false,
          "description": "Reports an incorrect HTML attribute value."
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag",
          "enabled": false,
          "description": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Unresolved fragment in a link",
          "enabled": false,
          "description": "Reports an unresolved last part of an URL after the `#` sign."
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown tag",
          "enabled": false,
          "description": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "enabled": false,
          "description": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Obsolete tag",
          "enabled": false,
          "description": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Mismatched image size",
          "enabled": false,
          "description": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Unresolved web link",
          "enabled": false,
          "description": "Reports an unresolved web link. Works by making network requests in the background."
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Obsolete attribute",
          "enabled": false,
          "description": "Reports an obsolete HTML5 attribute."
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational tag",
          "enabled": false,
          "description": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "enabled": false,
          "description": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "enabled": false,
          "description": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
        },
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "enabled": false,
          "description": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "enabled": false,
          "description": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
        },
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "enabled": false,
          "description": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "enabled": false,
          "description": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced @import",
          "enabled": false,
          "description": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
        },
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid type selector",
          "enabled": false,
          "description": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown at-rule",
          "enabled": false,
          "description": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
        },
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid function",
          "enabled": false,
          "description": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved custom property",
          "enabled": false,
          "description": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative property value",
          "enabled": false,
          "description": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
        },
        {
          "shortName": "CssUnresolvedClassInComposesRule",
          "displayName": "Unresolved class in 'composes' rule",
          "enabled": false,
          "description": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Misplaced or incorrect @charset",
          "enabled": false,
          "description": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports an incorrect CSS property value."
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid pseudo-selector",
          "enabled": false,
          "description": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid media feature",
          "enabled": false,
          "description": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
        }
      ]
    },
    {
      "name": "Structural search",
      "inspections": [
        {
          "shortName": "SSBasedInspection",
          "displayName": "Structural search inspection",
          "enabled": true,
          "description": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "GoStructInitializationWithoutFieldNames",
          "displayName": "Struct initialization without field names",
          "enabled": true,
          "description": "Reports structures that are initialized without specifying their field names. By default, the inspection is available only when you use the type that is defined in a different package.\n\nWhen initializing a structure, it is better to explicitly state field names in order\nto ensure that in case of changes in order of these fields or in names of the fields, they\nwill correctly continue to be addressed.\n\nExample:\n\n    _ = io.LimitedReader{nil, 10}\n\nThe `LimitedReader` initialization will be highlighted because explicit names for struct fields are missing.\nYou can apply the **Add keys and delete zero values** quick-fix to the\nstruct initialization. After the quick-fix is applied, the code looks as follows:\n\n    _ = io.LimitedReader{N: 10}\n\nThe inspection has the following options:\n\n* **Report types defined in current package**: reports situations when you declare and initialize struct in the same package.\n  Consider the following example.\n\n      d := struct {\n        c string\n       }{ \"dsd \"}\n\n* **Report struct literals without types**: reports fields without names when the type (struct or interface) is omitted.\n  Consider the following example when the type is omitted.\n\n      _ = []io.LimitedReader{\n       {nil, 10},\n       {nil, 20},\n       }\n\n  In the following example, the type is present but is redundant.\n\n      _ = []io.LimitedReader{\n       io.LimitedReader{nil, 10},\n       io.LimitedReader{nil, 20},\n      }\n"
        },
        {
          "shortName": "GoSnakeCaseUsage",
          "displayName": "Usage of Snake_Case",
          "enabled": true,
          "description": "Reports usage of snake case instead of camelcase for naming variables, constants and functions. According to [MixedCaps at golang.org](https://golang.org/doc/effective_go.html#mixed-caps), camelcase is a convention in Go.\n\nExample:\n\n    func get_external_IP() (string, error) {}\n\nThe `get_external_IP` is in snake case but should be in camelcase. You can apply a quick-fix to convert the function name to\n`getExternalIp`."
        },
        {
          "shortName": "GoUnitSpecificDurationSuffix",
          "displayName": "Unit-specific suffix for 'time.Duration'",
          "enabled": true,
          "description": "Reports unit-specific suffixes in constant and variable names of `time.Duration` type.\n\nThe inspection comes from `go lint`. A list of suffixes that imply a time unit is available\nin [the golang repository at\ngithub.com](https://github.com/golang/lint/blob/c5fb716d6688a859aae56d26d3e6070808df29f7/lint.go#L1365-L1373).\n\n`time.Duration` represents a value in nanoseconds, so adding a time unit suffix\nmight make the meaning of the variable confusing, or even indicate a misuse of the `time.Duration` API.\n\nExample:\n\n    var timeoutSeconds = 5 * time.Second\n"
        },
        {
          "shortName": "GoErrorStringFormat",
          "displayName": "Error string should not be capitalized or end with punctuation",
          "enabled": true,
          "description": "Reports format issues in error strings.\n\nExample:\n\n    err := fmt.Errorf(\"Cannot read the file!\")\n    log.Printf(\"Reading %s: %v\", file, err)\n\nAccording to\n[Error Strings at golang.org](https://golang.org/wiki/CodeReviewComments#error-strings),\nerror strings should not be capitalized or end with punctuation because they might appear among other context.\n\nTo fix the format, you can apply the **Fix error string format** quick-fix. After the quick-fix is applied,\nthe error string will look like this:\n\n    err := fmt.Errorf(\"cannot read the file\")\n    log.Printf(\"Reading %s: %v\", file, err)\n"
        },
        {
          "shortName": "GoCommentLeadingSpace",
          "displayName": "Comment has no leading space",
          "enabled": true,
          "description": "Reports comments without a leading space.\n\nNote that the inspection works only if you select the **Add a leading space to comments** in **Editor \\| Code Style \\| Go** on the\n**Other** tab.\n\nComments with a leading space can be easier to read since the first word is separated from the comment by a space.\n\nExample:\n\n    //Prints JSON received from the createJSON function\n    func printJSON(output []byte) {\n    \tfmt.Println(string(output))\n    }\n"
        },
        {
          "shortName": "GoReceiverNames",
          "displayName": "Receiver has a generic name",
          "enabled": true,
          "description": "Reports receiver names like `me`, `this`, `self`, or names that differ from other receiver names for this type.\n\nExample:\n\n    func (self *MeterSnapshot) Rate5() float64 { return math.Float64frombits(self.rate5) }\n\nAccording to [Receiver Names at golang.org](https://golang.org/wiki/CodeReviewComments#receiver-names),\nyou should not use generic names such as \"me\", \"this\", or \"self\". These identifiers are typical for object-oriented languages and might\ngive the method a special meaning."
        },
        {
          "shortName": "GoExportedElementShouldHaveComment",
          "displayName": "Exported element should have a comment",
          "enabled": true,
          "description": "Reports exported declarations without a documentation comment. According to [Doc Comments at golang.org](https://golang.org/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, see [Comment\nSentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix."
        },
        {
          "shortName": "GoCommentStart",
          "displayName": "Comment of exported element starts with the incorrect name",
          "enabled": true,
          "description": "Reports comments that do not start with the name of the exported element.\n\nAccording to\n[Comment Sentences at golang.org](https://golang.org/wiki/CodeReviewComments#comment-sentences), this is a convention to begin\na comment with the name of the exported element.\n\nExample:\n\n    // represents a request to run a command.\n    type Request struct {}\n\nThe comment starts with the struct description, not with the struct name. To stick to the convention rules, you can apply the **Add\nprefix to comment** quick-fix. After the quick-fix is applied, the comment looks as follows:\n\n```\n// Request represents a request to run a command.\ntype Request struct {} // better\n```"
        },
        {
          "shortName": "GoTypeParameterInLowerCase",
          "displayName": "Type parameter is declared in lowercase",
          "enabled": false,
          "description": "Reports type parameters that are declared in lowercase.\n\nExamples in the official Go documentation use type parameters in uppercase.\nThis inspection follows this uppercase rule for type parameters.\n\n    func PrintSlice[t any](s []t) {\n        for _, v := range s{\n            print(v)\n        }\n    }\n\nThe type parameter `t` is declared in lowercase and thus will be reported."
        },
        {
          "shortName": "GoNameStartsWithPackageName",
          "displayName": "Name starts with a package name",
          "enabled": true,
          "description": "Reports exported names that start with a package name. This inspection does not report such names in the `main` package.\n\nExample:\n\n    package myPackage\n\n    func MyPackageGetIP() {\n\n    }\n\nThe `MyPackageGetIP` name will be highlighted as it starts with the package name.\n\nAccording to\n[Package Names at golang.org](https://golang.org/wiki/CodeReviewComments#package-names),\nall references to names in a package will be done using the package name, so one can omit that name from the identifiers.\nFor example, if you are in a package `foo`, you do not need a type `FooFile`,\nwhich clients will write as `foo.FooFile`. Instead, we name the type `File`,\nwhich clients will write as `foo.File`."
        },
        {
          "shortName": "GoUnsortedImport",
          "displayName": "Unsorted imports",
          "enabled": true,
          "description": "Reports unsorted imports.\n\nAll Go programs should be formatted in the same way, the formatting rules are fixed by the\n[gofmt](https://golang.org/cmd/gofmt) tool. Those rules require imports to be sorted.\n\nExample of a wrong sorting:\n\n    import (\n     \"net\"\n     \"errors\"\n     \"fmt\"\n    )\n\nYou can apply the **Sort imports** quick-fix to fix the sorting. After the quick-fix is applied, the sorting\nlooks as follows:\n\n    import (\n     \"errors\"\n     \"fmt\"\n     \"net\"\n    )\n"
        },
        {
          "shortName": "GoExportedOwnDeclaration",
          "displayName": "Exported element should have its own declaration",
          "enabled": true,
          "description": "Reports exported variables or constants in comma-separated lists of declarations.\n\nExample:\n\n    const C1, C3, C2, C44, C9, C11, C6 = 1, 2, 3, 1, 3, 2, 1\n\nThis declaration makes it hard to understand what value each constant has. You can apply the **Extract to own declaration** quick-fix\nto make this declaration more readable. After the quick-fix is applied to each constant, the declaration looks as follows:\n\n    const (\n     C3  = 2\n     C2  = 3\n     C44 = 1\n     C9  = 3\n     C11 = 2\n     C6  = 1\n     C1  = 1\n    )\n"
        },
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "enabled": false,
          "description": "Reports a missing semicolon at the end of a declaration."
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "enabled": false,
          "description": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
        },
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "enabled": false,
          "description": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "GoDeferInLoop",
          "displayName": "'defer' in the loop",
          "enabled": true,
          "description": "Reports `defer` statements inside loops.\n\nUsing `defer` in loops can lead to resource leaks or unpredictable execution order of statements.\n\nExample:\n\n    func main() {\n     for {\n      field, err := db.Query(\"SELECT 1\")\n      if err != nil {\n       // ...\n      }\n      defer field.Close()\n      // ...\n     }\n    }\n\nCalls of `defer row.Close()` inside the loop are not executed until the function completes its execution.\nNot at the end of each step of the `for` loop. Such implementation might lead to overflow of the function's stack and\nother issues."
        },
        {
          "shortName": "GoInfiniteFor",
          "displayName": "Infinite 'for' loop",
          "enabled": true,
          "description": "Reports empty `for` loops.\n\nRunning this code will make the CPU usage stay at maximum and will make the machine nearly unusable.\n\nExample:\n\n    func main() {\n     for {\n     }\n    }\n"
        },
        {
          "shortName": "GoUnreachableCode",
          "displayName": "Unreachable code",
          "enabled": true,
          "description": "Reports code that can never be executed because there exists no control flow path to the code from the rest of the program.\n\nExample:\n\n    func _() int {\n     print(1)\n     return 2\n     println() // This code is unreachable \n     return 0\n    }\n"
        },
        {
          "shortName": "GoAssignmentToReceiver",
          "displayName": "Assignment to a receiver",
          "enabled": true,
          "description": "Reports assignments to method receivers.\n\nWhen you assign a value to the method receiver, the value will not be reflected outside of the method itself.\nValues will be reflected in subsequent calls from the same method.\n\nExample:\n\n    package main\n\n    import \"fmt\"\n\n    type demo struct {\n     Val int\n    }\n\n    func (d *demo) change() {\n     d = nil // Assignment to the method receiver propagates only to callees but not to callers\n     d.myVal()\n    }\n\n    func (d *demo) myVal() {\n     fmt.Printf(\"my val: %#v\\n\", d)\n    }\n\n    func (d demo) change2() {\n     d = demo{} // Assignment to the method receiver doesn't propagate to other calls\n     d.myVal()\n    }\n\n    func (d *demo) change3() {\n     d.Val = 3\n     d.myVal()\n    }\n\n    func main() {\n     d := &demo{}\n     d.myVal()\n     d.change()\n     d.myVal()\n     d.Val = 2\n     d.change2()\n     d.myVal()\n     d.change3()\n     d.myVal()\n    }\n"
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "enabled": false,
          "description": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
        },
        {
          "shortName": "LanguageDetectionInspection",
          "displayName": "Natural language detection",
          "enabled": false,
          "description": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
        },
        {
          "shortName": "GrazieInspection",
          "displayName": "Grammar",
          "enabled": false,
          "description": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "enabled": false,
          "description": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**Ð¡**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
        },
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "enabled": false,
          "description": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "enabled": false,
          "description": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
        }
      ]
    }
  ]
}